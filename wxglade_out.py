#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Thu Oct 19 21:47:48 2023
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib_canvas

import os
import glob
import inspect
import importlib.util
import matplotlib_canvas
# end wxGlade

class FileDrop(wx.FileDropTarget):

    def __init__(self, window):

        wx.FileDropTarget.__init__(self)
        self.window = window
        self.dropped_file_paths = []

    def OnDropFiles(self, x, y, filenames):

        for name in filenames:
            self.dropped_file_paths.append(name)

            print(name)

        return True

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        
        print("test")
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1200, 800))
        self.SetTitle("MRSprocessing")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        self.label_drag_and_drop = wx.StaticText(self.panel_1, wx.ID_ANY, "Drag and Drop Inputs Files\nHere", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_1.Add(self.label_drag_and_drop, 0, wx.ALL | wx.EXPAND, 10)


        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        self.button_processing = wx.Button(self.panel_1, wx.ID_ANY, "Processing")
        sizer_2.Add(self.button_processing, 0, wx.ALL | wx.EXPAND, 5)

        self.matplotlib_canvas = matplotlib_canvas.MatplotlibCanvas(self.panel_1, wx.ID_ANY)
        sizer_2.Add(self.matplotlib_canvas, 1, wx.ALL | wx.EXPAND, 3)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        
        self.Bind(wx.EVT_BUTTON, self.on_button_processing, self.button_processing)
        
        

        self.dt = FileDrop(self.label_drag_and_drop)
        self.label_drag_and_drop.SetDropTarget(self.dt)
        
        
        processing_files = glob.glob(os.path.join(os.path.dirname(__file__), "processing", "*.py"))
        self.processing_steps = {}
        for file in processing_files:
            module_name = os.path.basename(file)[:-3]
            if module_name != "__init__":
                spec = importlib.util.spec_from_file_location(module_name, file)
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                for name, obj in inspect.getmembers(module):
                    if inspect.isclass(obj) and obj.__module__ == module_name:
                        obj = getattr(module, name)
                        self.processing_steps[name] = obj

    def on_button_processing(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_button_processing' not implemented!")
        event.Skip()
        # end wxGlade

# end of class MyFrame

# class MyGUI(wx.App):
#     def OnInit(self):
#         self.frame = MyFrame(None, wx.ID_ANY, "")
#         self.SetTopWindow(self.frame)
#         self.frame.Show()
#         return True

# # end of class MyGUI

# if __name__ == "__main__":
#     GUI = MyGUI(0)
#     GUI.MainLoop()
